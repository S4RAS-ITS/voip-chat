:root {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  line-height: 1.6;
  font-weight: 400;
  color-scheme: light dark;

  /* Base Colors */
  --primary-hue: 210; /* Blue */
  --secondary-hue: 270; /* Purple */
  --success-hue: 130; /* Green */
  --warning-hue: 45;  /* Yellow */
  --danger-hue: 0;    /* Red */
  --info-hue: 190;    /* Teal */

  --text-emphasis-high: 0.87;
  --text-emphasis-medium: 0.60;
  --text-emphasis-disabled: 0.38;

  /* Light Theme Variables */
  --background-light: #f0f2f5;
  --surface-light: #ffffff; /* For cards, modals, sidebars */
  --on-surface-light: #1c1e21;
  --on-surface-variant-light: hsl(var(--primary-hue), 10%, 40%); /* Secondary text, icons */
  --primary-light: hsl(var(--primary-hue), 100%, 50%);
  --primary-container-light: hsl(var(--primary-hue), 100%, 92%); /* Lighter for containers */
  --on-primary-container-light: hsl(var(--primary-hue), 100%, 20%); /* Darker text on light container */
  --secondary-light: hsl(var(--secondary-hue), 70%, 50%);
  --border-light: hsl(var(--primary-hue), 20%, 88%); /* Slightly lighter border */
  --input-bg-light: #ffffff;
  --input-border-light: hsl(var(--primary-hue), 20%, 78%);
  --input-focus-border-light: var(--primary-light);
  --shadow-color-light: rgba(0, 0, 0, 0.07);
  --skeleton-base-light: hsl(var(--primary-hue), 20%, 92%);
  --skeleton-shine-light: hsl(var(--primary-hue), 20%, 98%);

  /* Dark Theme Variables */
  --background-dark: #121212;
  --surface-dark: #1e1e1e;
  --on-surface-dark: #e4e6eb;
  --on-surface-variant-dark: hsl(var(--primary-hue), 10%, 65%);
  --primary-dark: hsl(var(--primary-hue), 90%, 60%); /* Slightly brighter */
  --primary-container-dark: hsl(var(--primary-hue), 70%, 20%); /* Darker for containers */
  --on-primary-container-dark: hsl(var(--primary-hue), 80%, 85%); /* Lighter text on dark container */
  --secondary-dark: hsl(var(--secondary-hue), 60%, 60%);
  --border-dark: hsl(var(--primary-hue), 15%, 25%); /* Slightly darker border */
  --input-bg-dark: #2a2a2a;
  --input-border-dark: hsl(var(--primary-hue), 15%, 35%);
  --input-focus-border-dark: var(--primary-dark);
  --shadow-color-dark: rgba(0, 0, 0, 0.25);
  --skeleton-base-dark: hsl(var(--primary-hue), 10%, 18%);
  --skeleton-shine-dark: hsl(var(--primary-hue), 10%, 25%);

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;

  /* Transitions */
  --transition-short: 0.2s ease-out;
  --transition-medium: 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  --transition-long: 0.5s cubic-bezier(0.4, 0, 0.2, 1);

  --sidebar-width: 280px;
  --transition-sidebar: width var(--transition-medium), padding var(--transition-medium), opacity var(--transition-medium);
  --transition-main-content: margin-left var(--transition-medium);
}

/* Apply base theme */
body {
  background-color: var(--background-light);
  color: var(--on-surface-light);
}

@media (prefers-color-scheme: dark) {
  body {
    background-color: var(--background-dark);
    color: var(--on-surface-dark);
  }
}

/* Global Reset & Base Styles */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  display: flex; /* For centering #root if needed, or for full-page app layout */
  flex-direction: column;
  min-height: 100vh;
  transition: background-color var(--transition-medium), color var(--transition-medium);
}

#root {
  flex-grow: 1;
  display: flex;
  flex-direction: column; /* Allow #root to manage its children in a column */
  width: 100%;
  max-width: 100%; /* Remove max-width for full screen app */
  padding: 0; /* Remove padding if app has its own layout containers */
  margin: 0;
  text-align: left; /* Default text align to left for app content */
}

/* App Layout Structure (Example - can be adjusted based on chosen component structure) */
.app-container {
  display: flex;
  flex-grow: 1;
  height: 100vh; /* Ensure app container takes full viewport height */
  overflow: hidden; /* Prevent body scroll, manage scroll within panes */
}

.sidebar {
  width: var(--sidebar-width);
  flex-shrink: 0;
  background-color: var(--surface-light);
  border-right: 1px solid var(--border-light);
  overflow-x: hidden;
  overflow-y: hidden;
  transition: var(--transition-sidebar);
  display: flex;
  flex-direction: column;
}

/* Style untuk H2 di dalam sidebar */
.sidebar h2 {
  padding: 1rem; /* Sesuaikan padding jika diperlukan */
  margin: 0;
  font-size: 1.4em;
  color: var(--on-surface-light); /* Warna teks untuk tema terang */
  border-bottom: 1px solid var(--border-light); /* Garis bawah untuk header sidebar */
  flex-shrink: 0; /* Agar header tidak ikut scroll atau terpotong */
}

.app-container.sidebar-closed .sidebar {
  width: 0;
  padding-left: 0;
  padding-right: 0;
  opacity: 0;
  border-right: none;
}

.app-container.sidebar-closed .sidebar h2 {
    display: none; /* Sembunyikan juga judul saat sidebar tertutup */
}

.main-content {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  background-color: var(--background-light);
  overflow: hidden; /* Children will manage their own scroll */
  /* margin-left is not needed if sidebar just shrinks/grows */
  /* transition: var(--transition-main-content); Removed as not needed with width transition */
}

.app-header {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--border-light);
  background-color: var(--surface-light);
  flex-shrink: 0; /* Prevent header from shrinking */
  transition: background-color var(--transition-medium), border-color var(--transition-medium);
}

.app-header h1 {
  margin: 0;
  font-size: 1.3em; /* Adjusted size */
  color: var(--on-surface-light);
  font-weight: 600;
}

.button-icon {
  background: none;
  border: none;
  padding: 0.4rem;
  margin-right: 0.75rem;
  color: var(--on-surface-variant-light);
  cursor: pointer;
  border-radius: 50%;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}
.button-icon:hover {
  background-color: var(--primary-container-light);
  color: var(--primary-light);
  transform: none; /* Override default button hover */
  box-shadow: none;
}
.button-icon svg {
  width: 24px;
  height: 24px;
  fill: currentColor;
}

.content-area {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  overflow-y: auto; /* Allow this area to scroll if content overflows */
  padding: 1rem; /* Add padding to the general content area */
}

.call-view-wrapper { /* Removed padding from here, added to .content-area */
  /* padding: 1rem; */ 
}

.chat-area { /* Example within main-content */
  flex-grow: 1;
  padding: 1rem;
  overflow-y: auto;
}

.call-view { /* Example */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  flex-grow: 1;
}

@media (prefers-color-scheme: dark) {
  .sidebar {
    background-color: var(--surface-dark);
    border-right-color: var(--border-dark);
  }
  /* Style untuk H2 di dalam sidebar untuk tema gelap */
  .sidebar h2 {
    color: var(--on-surface-dark); /* Warna teks untuk tema gelap */
    border-bottom-color: var(--border-dark);
  }
  .app-container.sidebar-closed .sidebar {
    border-right: none;
  }
  .main-content {
    background-color: var(--background-dark);
  }
  .app-header {
    background-color: var(--surface-dark);
    border-bottom-color: var(--border-dark);
  }
  .app-header h1 {
    color: var(--on-surface-dark);
  }
  .button-icon {
    color: var(--on-surface-variant-dark);
  }
  .button-icon:hover {
    background-color: var(--primary-container-dark);
    color: var(--primary-dark);
  }
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: 1.3;
  color: var(--on-surface-light);
  margin-bottom: 0.75em;
}
@media (prefers-color-scheme: dark) {
  h1, h2, h3, h4, h5, h6 {
    color: var(--on-surface-dark);
  }
}

p {
  margin-bottom: 1rem;
  line-height: 1.7;
  color: var(--on-surface-variant-light);
}
@media (prefers-color-scheme: dark) {
  p {
    color: var(--on-surface-variant-dark);
  }
}

a {
  color: var(--primary-light);
  text-decoration: none;
  transition: color var(--transition-short);
}
a:hover {
  color: hsl(var(--primary-hue), 100%, 40%);
}
@media (prefers-color-scheme: dark) {
  a {
    color: var(--primary-dark);
  }
  a:hover {
    color: hsl(var(--primary-hue), 90%, 55%);
  }
}

/* Card (Revised and more generic for various uses) */
.card {
  background-color: var(--surface-light);
  padding: 1.5em; /* Adjusted padding */
  border-radius: 12px;
  border: 1px solid var(--border-light);
  box-shadow: 0 4px 12px var(--shadow-color-light);
  width: 100%;
  max-width: 500px; /* Default max-width */
  margin: 1rem auto; /* Centering by default */
  transition: background-color var(--transition-medium), box-shadow var(--transition-medium), border-color var(--transition-medium);
}
.card-header {
  padding-bottom: 0.75em;
  margin-bottom: 0.75em;
  border-bottom: 1px solid var(--border-light);
}
.card-footer {
  padding-top: 0.75em;
  margin-top: 0.75em;
  border-top: 1px solid var(--border-light);
}

@media (prefers-color-scheme: dark) {
  .card {
    background-color: var(--surface-dark);
    border-color: var(--border-dark);
    box-shadow: 0 6px 18px var(--shadow-color-dark);
  }
  .card-header, .card-footer {
    border-color: var(--border-dark);
  }
}

/* Forms: Inputs and Buttons (Enhanced) */
input[type="text"],
input[type="password"],
input[type="email"],
input[type="search"],
textarea {
  display: block;
  width: 100%;
  padding: 0.75em 1em;
  font-size: 1em;
  font-family: inherit;
  line-height: 1.5;
  color: var(--on-surface-light);
  background-color: var(--input-bg-light);
  border: 1px solid var(--input-border-light);
  border-radius: 8px;
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
  transition: border-color var(--transition-short), box-shadow var(--transition-short), background-color var(--transition-medium);
}
input[type="text"]::placeholder,
textarea::placeholder {
  color: var(--on-surface-variant-light);
  opacity: var(--text-emphasis-medium);
}
input[type="text"]:focus,
textarea:focus {
  outline: none;
  border-color: var(--input-focus-border-light);
  box-shadow: 0 0 0 0.2rem hsla(var(--primary-hue), 100%, 50%, 0.25);
}

button,
.button { /* .button class for non-button elements styled as buttons */
  display: inline-flex; /* For aligning icon and text */
  align-items: center;
  justify-content: center;
  padding: 0.75em 1.5em;
  font-size: 1em;
  font-weight: 500; /* Slightly less bold than h-tags */
  font-family: inherit;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  border: 1px solid transparent;
  border-radius: 8px;
  transition: background-color var(--transition-short), border-color var(--transition-short), color var(--transition-short), box-shadow var(--transition-short), transform var(--transition-short);
}
button:hover {
  transform: translateY(-1px); /* Subtle lift */
  box-shadow: 0 2px 4px var(--shadow-color-light);
}
button:active {
  transform: translateY(0px); /* Press down effect */
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
}
button:disabled,
button.disabled {
  opacity: 0.65;
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
}

/* Button Variants (using CSS variables for hues) */
.button-primary {
  background-color: var(--primary-light);
  color: var(--surface-light); /* Or a specific on-primary color */
  border-color: var(--primary-light);
}
.button-primary:hover:not(:disabled) {
  background-color: hsl(var(--primary-hue), 100%, 45%);
  border-color: hsl(var(--primary-hue), 100%, 40%);
}
.button-secondary {
  background-color: var(--primary-container-light);
  color: var(--on-primary-container-light);
  border-color: var(--primary-container-light);
}
.button-secondary:hover:not(:disabled) {
  background-color: hsl(var(--primary-hue), 100%, 88%); /* Adjusted hover for better visibility */
}
.button-danger {
  background-color: hsl(var(--danger-hue), 70%, 50%);
  color: white;
  border-color: hsl(var(--danger-hue), 70%, 50%);
}
.button-danger:hover:not(:disabled) {
  background-color: hsl(var(--danger-hue), 70%, 45%);
  border-color: hsl(var(--danger-hue), 70%, 40%);
}
.button-success {
  background-color: hsl(var(--success-hue), 60%, 45%);
  color: white;
  border-color: hsl(var(--success-hue), 60%, 45%);
}
.button-success:hover:not(:disabled) {
  background-color: hsl(var(--success-hue), 60%, 40%);
  border-color: hsl(var(--success-hue), 60%, 35%);
}
/* Add more variants: warning, info, text-only, outline */

@media (prefers-color-scheme: dark) {
  input[type="text"], textarea {
    color: var(--on-surface-dark);
    background-color: var(--input-bg-dark);
    border-color: var(--input-border-dark);
  }
  input[type="text"]::placeholder, textarea::placeholder {
    color: var(--on-surface-variant-dark);
  }
  input[type="text"]:focus, textarea:focus {
    border-color: var(--input-focus-border-dark);
    box-shadow: 0 0 0 0.2rem hsla(var(--primary-hue), 90%, 60%, 0.25);
  }
  button:hover {
    box-shadow: 0 2px 4px var(--shadow-color-dark);
  }
  button:active {
    box-shadow: inset 0 1px 2px rgba(255,255,255,0.05);
  }
  .button-primary {
    background-color: var(--primary-dark);
    color: var(--background-dark); /* Ensure contrast for primary button text in dark mode */
    border-color: var(--primary-dark);
  }
  .button-primary:hover:not(:disabled) {
    background-color: hsl(var(--primary-hue), 90%, 55%);
    border-color: hsl(var(--primary-hue), 90%, 50%);
  }
  .button-secondary {
    background-color: var(--primary-container-dark);
    color: var(--on-primary-container-dark);
    border-color: var(--primary-container-dark);
  }
  .button-secondary:hover:not(:disabled) {
    background-color: hsl(var(--primary-hue), 70%, 25%); /* Adjusted hover */
  }
  .button-danger {
    background-color: hsl(var(--danger-hue), 60%, 55%);
    border-color: hsl(var(--danger-hue), 60%, 55%);
  }
  .button-danger:hover:not(:disabled) {
    background-color: hsl(var(--danger-hue), 60%, 50%);
    border-color: hsl(var(--danger-hue), 60%, 45%);
  }
  .button-success {
    background-color: hsl(var(--success-hue), 55%, 50%);
    border-color: hsl(var(--success-hue), 55%, 50%);
  }
  .button-success:hover:not(:disabled) {
    background-color: hsl(var(--success-hue), 55%, 45%);
    border-color: hsl(var(--success-hue), 55%, 40%);
  }
}

/* SIP Status & Call Controls (Keep and enhance original ones) */
.sip-status {
  margin-bottom: 1.5rem;
  font-size: 1.1em;
  padding: 0.5em;
  border-radius: 8px;
  text-align: center;
}
.sip-status strong {
  font-weight: 500;
  padding: 0.2em 0.5em;
  border-radius: 6px;
}
/* Specific status colors */
.sip-status.registered strong {
  background-color: hsla(var(--success-hue), 70%, 50%, 0.15);
  color: hsl(var(--success-hue), 60%, 40%);
}
.sip-status.connecting strong, .sip-status.calling strong, .sip-status.incoming strong, .sip-status.established strong {
  background-color: hsla(var(--primary-hue), 100%, 50%, 0.1);
  color: hsl(var(--primary-hue), 90%, 45%);
}
.sip-status.failed strong {
  background-color: hsla(var(--danger-hue), 70%, 50%, 0.1);
  color: hsl(var(--danger-hue), 60%, 45%);
}

@media (prefers-color-scheme: dark) {
  .sip-status.registered strong {
    background-color: hsla(var(--success-hue), 60%, 30%, 0.3);
    color: hsl(var(--success-hue), 50%, 70%);
  }
  .sip-status.connecting strong, .sip-status.calling strong, .sip-status.incoming strong, .sip-status.established strong {
    background-color: hsla(var(--primary-hue), 80%, 35%, 0.3);
    color: hsl(var(--primary-hue), 70%, 75%);
  }
  .sip-status.failed strong {
    background-color: hsla(var(--danger-hue), 60%, 30%, 0.3);
    color: hsl(var(--danger-hue), 50%, 70%);
  }
}

.call-controls, .incoming-call-controls {
  display: flex;
  flex-direction: column;
  gap: 0.75rem; /* Space between input and button or multiple buttons */
  margin-bottom: 1.5rem;
}

/* Loading States & Skeleton Loading */
@keyframes shimmer {
  0% { background-position: -1000px 0; }
  100% { background-position: 1000px 0; }
}
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-spinner {
  width: 24px;
  height: 24px;
  border: 3px solid hsla(var(--primary-hue), 100%, 50%, 0.2);
  border-top-color: var(--primary-light);
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  margin: 1rem auto; /* Example usage */
}
@media (prefers-color-scheme: dark) {
  .loading-spinner {
    border-top-color: var(--primary-dark);
  }
}

.skeleton {
  animation: shimmer 2s infinite linear;
  background: linear-gradient(to right, var(--skeleton-base-light) 8%, var(--skeleton-shine-light) 18%, var(--skeleton-base-light) 33%);
  background-size: 1000px 100%; /* Large enough for shimmer effect */
  border-radius: 4px;
}
.skeleton-line {
  height: 1em;
  margin-bottom: 0.5em;
}
.skeleton-line:last-child {
  margin-bottom: 0;
}
.skeleton-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
}
.skeleton-card { /* A card that is a skeleton */
  padding: 1.5em;
  border-radius: 12px;
}

@media (prefers-color-scheme: dark) {
  .skeleton {
    background: linear-gradient(to right, var(--skeleton-base-dark) 8%, var(--skeleton-shine-dark) 18%, var(--skeleton-base-dark) 33%);
    background-size: 1000px 100%;
  }
}

/* Responsive adjustments */
/* Mobile first approach could be used by defining base styles for mobile
   and then overriding for larger screens using min-width media queries.
   For this example, I'll add a general tablet/desktop adjustment. */

/* Example: Make sidebar collapsible or hidden on small screens - JS would be needed for toggle */
@media (max-width: 768px) {
  .app-container {
    flex-direction: column; /* Stack panes on mobile */
  }
  .sidebar {
    width: 100%;
    height: auto; /* Adjust height as needed or make it a drawer */
    border-right: none;
    border-bottom: 1px solid var(--border-light);
    /* Potentially hide and show with a button */
  }
  .card {
    margin-left: 1rem;
    margin-right: 1rem;
    padding: 1.2em;
  }
  h1 { font-size: 1.8em; }
  /* Adjust button/input padding for smaller screens if needed */
  button, .button { padding: 0.6em 1.2em; }
  input[type="text"], textarea { padding: 0.6em 0.8em; }
}

/* Original Vite/React logos and .read-the-docs (can be removed or restyled if not part of the main app UI) */
.logo-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 2rem;
  padding: 1rem 0; /* Add some padding if they are kept */
}
.logo {
  height: 5em;
  padding: 1em;
  will-change: filter;
  transition: filter var(--transition-medium);
}
.logo:hover {
  filter: drop-shadow(0 0 1.2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 1.2em #61dafbaa);
}
.read-the-docs {
  color: var(--on-surface-variant-light);
  font-size: 0.85em;
  margin-top: 2rem;
  text-align: center;
}
@media (prefers-color-scheme: dark) {
  .read-the-docs {
    color: var(--on-surface-variant-dark);
  }
}

/* Ensure audio player for SIP calls remains hidden */
audio[controls="false"] {
    display: none !important;
}

/* Contact List */
.contact-list {
  flex-grow: 1;
  overflow-y: auto;
}
.contact-item {
  /* Styles are mostly inline in JSX, but we can add hover here */
  padding: 0.75rem 1rem; /* Kept from inline */
  cursor: pointer; /* Kept from inline */
  transition: background-color var(--transition-short); /* Kept from inline */
  border-bottom: 1px solid var(--border-light);
}
.contact-item:hover {
  background-color: var(--primary-container-light);
}
.contact-item p {
  color: var(--on-surface-light); /* Ensure text color */
  margin-bottom: 0.2em;
  margin: 0; /* Added from inline */
  font-weight: 500; /* Added from inline */
}
.contact-item small {
  color: var(--on-surface-variant-light);
  font-size: 0.8em; /* Added from inline */
}

@media (prefers-color-scheme: dark) {
  .contact-item:hover {
    background-color: var(--primary-container-dark);
  }
  .contact-item p {
    color: var(--on-surface-dark);
  }
  .contact-item small {
    color: var(--on-surface-variant-dark);
  }
  .contact-item {
     border-bottom-color: var(--border-dark); /* Removed !important */
  }
}

/* Active Call Info */
.active-call-info {
  text-align: center;
  margin-bottom: 1.5rem;
}
.avatar-placeholder {
  width: 90px; /* Increased size */
  height: 90px;
  border-radius: 50%;
  background-color: var(--primary-container-light);
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 1rem auto;
  color: var(--on-primary-container-light);
  font-size: 2.2em; /* Larger initials */
  font-weight: 600;
  border: 2px solid var(--primary-light);
}
.active-call-info h3 {
  margin: 0.25rem 0;
  color: var(--on-surface-light);
  font-size: 1.4em;
}
.call-duration {
  margin: 0 0 1.5rem 0; /* Increased bottom margin */
  color: var(--on-surface-variant-light);
  font-size: 1.2em;
}
.call-action-buttons {
  display: flex;
  justify-content: center;
  gap: 0.75rem;
  flex-wrap: wrap; /* Allow buttons to wrap on smaller screens */
}
.call-action-buttons .button {
  min-width: 100px; /* Give buttons a min width */
}

@media (prefers-color-scheme: dark) {
  .avatar-placeholder {
    background-color: var(--primary-container-dark);
    color: var(--on-primary-container-dark);
    border-color: var(--primary-dark);
  }
  .active-call-info h3 {
    color: var(--on-surface-dark);
  }
  .call-duration {
    color: var(--on-surface-variant-dark);
  }
}

/* Chat Panel */
.chat-panel-wrapper {
  padding: 0 1rem 1rem 1rem;
  margin-top: auto; /* Push to bottom */
  flex-shrink: 0; /* Prevent shrinking */
  background-color: var(--surface-light); /* Give chat wrapper a surface color */
  border-top: 1px solid var(--border-light);
  /* box-shadow: 0 -2px 5px rgba(0,0,0,0.03); /* Subtle shadow on top */
}

.chat-panel {
  /* max-height: 300px; Remove fixed max-height, let flexbox handle it or set it on messages area */
  display: flex;
  flex-direction: column;
  background-color: transparent; /* Inherit from wrapper */
  border: none; /* Remove card border if wrapper has it */
  box-shadow: none; /* Remove card shadow if wrapper has it */
  padding: 0; /* Remove card padding if wrapper has it */
  margin: 0; /* Remove card margin */
  height: 250px; /* Example fixed height for chat panel area */
}

.chat-messages {
  flex-grow: 1;
  overflow-y: auto;
  padding: 0.75rem;
  /* border-bottom: 1px solid var(--border-light); Moved to wrapper */
  display: flex;
  flex-direction: column-reverse; /* Newest messages at the bottom */
}

.chat-message {
  margin-bottom: 0.75rem; /* Increased spacing */
  padding: 0.5rem 0.75rem;
  border-radius: 12px;
  max-width: 75%;
  word-wrap: break-word;
}

.chat-message.sent {
  background-color: var(--primary-container-light);
  color: var(--on-primary-container-light);
  margin-left: auto; /* Align to right */
  border-bottom-right-radius: 4px; /* Bubble tail effect */
}

.chat-message.received {
  background-color: hsl(var(--primary-hue), 15%, 95%); /* Slightly different bg for received */
  color: var(--on-surface-light);
  margin-right: auto; /* Align to left */
  border-bottom-left-radius: 4px; /* Bubble tail effect */
}

.chat-message strong {
  font-weight: 600; /* Make sender bold */
  display: block; /* Sender on its own line or adjust as needed */
  margin-bottom: 0.2rem;
  font-size: 0.9em;
}

.chat-input-area {
  display: flex;
  padding: 0.75rem;
  border-top: 1px solid var(--border-light);
  background-color: var(--surface-light);
}

.chat-input-area input[type="text"] {
  flex-grow: 1;
  margin-right: 0.5rem;
  border-radius: 20px; /* Pill shape input */
  padding-left: 1.2em;
  padding-right: 1.2em;
}

.chat-input-area .button {
  border-radius: 20px; /* Pill shape button */
  padding-left: 1.2em;
  padding-right: 1.2em;
}

@media (prefers-color-scheme: dark) {
  .chat-panel-wrapper {
    background-color: var(--surface-dark);
    border-top-color: var(--border-dark);
  }
  .chat-message.sent {
    background-color: var(--primary-container-dark);
    color: var(--on-primary-container-dark);
  }
  .chat-message.received {
    background-color: hsl(var(--primary-hue), 10%, 22%); /* Darker bg for received */
    color: var(--on-surface-dark);
  }
  .chat-input-area {
    border-top-color: var(--border-dark);
    background-color: var(--surface-dark);
  }
}

/* Minor adjustments might be needed based on new layout */
h1 {
  font-size: 1.8em; /* Adjust global H1 if app-header H1 is different */
}

.card {
  margin: 1rem auto; /* General card margin */
}
